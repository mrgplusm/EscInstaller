<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Canceld" xml:space="preserve">
    <value>Operation Canceld</value>
  </data>
  <data name="CanceldTitle" xml:space="preserve">
    <value>Cancelled</value>
  </data>
  <data name="CancelWrite" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="DragDropButton" xml:space="preserve">
    <value>Open Filemanager *(or drag &amp; drop to add)</value>
  </data>
  <data name="MoveThisTrack" xml:space="preserve">
    <value>Move this track</value>
  </data>
  <data name="RemoveMessages" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="SdMessageCardView" xml:space="preserve">
    <value>SD Card Manager</value>
  </data>
  <data name="TrackLength" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="TrackLocation" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="TrackName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Trackno" xml:space="preserve">
    <value>No.</value>
  </data>
  <data name="WriteCompleted" xml:space="preserve">
    <value>File have been written to SDCard</value>
  </data>
  <data name="WriteCompletedTitle" xml:space="preserve">
    <value>Completed</value>
  </data>
  <data name="WriteToSdCard" xml:space="preserve">
    <value>Write SD</value>
  </data>
  <data name="Mandatory" xml:space="preserve">
    <value>Mandatory</value>
  </data>
  <data name="RemoveWrong" xml:space="preserve">
    <value>Remove wrong</value>
  </data>
  <data name="ResetDrives" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="ErrorOccured" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="PlayTrack" xml:space="preserve">
    <value>Play this track</value>
  </data>
  <data name="TrackNameExists" xml:space="preserve">
    <value>Track {0} already exists and is discarded</value>
  </data>
  <data name="TrackNameExistsTitle" xml:space="preserve">
    <value>Existing track</value>
  </data>
  <data name="StopTrack" xml:space="preserve">
    <value>Stop Track</value>
  </data>
  <data name="AddPreDefinedToCard" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="PredefinedHeader" xml:space="preserve">
    <value>Message library:</value>
  </data>
  <data name="ErrorRenameFile" xml:space="preserve">
    <value>Error renaming file</value>
  </data>
  <data name="SelectedMessages" xml:space="preserve">
    <value>Message selection:</value>
  </data>
  <data name="ErrorPlayMessage" xml:space="preserve">
    <value>This file cannot be played: {0}</value>
  </data>
  <data name="ErrorPlayTitle" xml:space="preserve">
    <value>Error playing file</value>
  </data>
  <data name="CardA" xml:space="preserve">
    <value>Sd card 1</value>
  </data>
  <data name="CardB" xml:space="preserve">
    <value>Sd card 2</value>
  </data>
  <data name="SystemIsNotOpenWarning" xml:space="preserve">
    <value>No system file is opened, only short filenames will be available in matrix as the cant be linked</value>
  </data>
  <data name="NotEnoughMessagesHeader" xml:space="preserve">
    <value>Error writing </value>
  </data>
  <data name="NotEnoughMessageText" xml:space="preserve">
    <value>At least 6 messages have to be written on the card</value>
  </data>
  <data name="Error16KhzIsAllreadyAdded" xml:space="preserve">
    <value>The 16Khz file is allready added and cannot be written twice</value>
  </data>
  <data name="ErrorAddFileCount" xml:space="preserve">
    <value>There's only space for 254 tracks</value>
  </data>
  <data name="ErrorAddFileMp3Extension" xml:space="preserve">
    <value>A file did not contain the necessarily .mp3 extension</value>
  </data>
  <data name="ErrorAddFileTitle" xml:space="preserve">
    <value>Error adding file</value>
  </data>
  <data name="MandatoryWarning" xml:space="preserve">
    <value>Select select at least 7 mandatory messages</value>
  </data>
  <data name="SaveContentToSdCard" xml:space="preserve">
    <value>Write contents to SDcard</value>
  </data>
</root>