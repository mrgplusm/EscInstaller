<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="mboxcalibrateZone" xml:space="preserve">
    <value>Calibrate zone</value>
  </data>
  <data name="mboxcalibrateZoneTitle" xml:space="preserve">
    <value>Calibrate</value>
  </data>
  <data name="_monitorPlay" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="_monitorStop" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="ClearCalibrateOption" xml:space="preserve">
    <value>Clear calibrated line</value>
  </data>
  <data name="Enable1khzMeasure" xml:space="preserve">
    <value>1 kHz measurement</value>
  </data>
  <data name="FrequencyLow" xml:space="preserve">
    <value>1 kHz</value>
  </data>
  <data name="GbCalibrate" xml:space="preserve">
    <value>Calibrate output</value>
  </data>
  <data name="GbCalibrationOptions" xml:space="preserve">
    <value>Measure current load</value>
  </data>
  <data name="GbPlayTestMessage" xml:space="preserve">
    <value>Play test message</value>
  </data>
  <data name="Khz18" xml:space="preserve">
    <value>18 kHz</value>
  </data>
  <data name="Khz19" xml:space="preserve">
    <value>19 kHz</value>
  </data>
  <data name="Khz20" xml:space="preserve">
    <value>20 kHz</value>
  </data>
  <data name="Khz21" xml:space="preserve">
    <value>21 kHz</value>
  </data>
  <data name="Khz22" xml:space="preserve">
    <value>22 kHz</value>
  </data>
  <data name="Line100VOption" xml:space="preserve">
    <value>100V loudspeaker line</value>
  </data>
  <data name="LowImpedanceOption" xml:space="preserve">
    <value>Low Impedance line</value>
  </data>
  <data name="Measure1k" xml:space="preserve">
    <value>Measure Load</value>
  </data>
  <data name="MeasuredOhm" xml:space="preserve">
    <value>Measured load (Ω)</value>
  </data>
  <data name="MeasuredWatt" xml:space="preserve">
    <value>Measured load (W)</value>
  </data>
  <data name="MonitoringDeviation1" xml:space="preserve">
    <value>Line deviation</value>
  </data>
  <data name="MonitoringOptions" xml:space="preserve">
    <value>Monitoring options</value>
  </data>
  <data name="StoredOhm" xml:space="preserve">
    <value>Stored load (Ω)</value>
  </data>
  <data name="StoredWatt" xml:space="preserve">
    <value>Stored load (W)</value>
  </data>
  <data name="TestModeEnable" xml:space="preserve">
    <value>Output in test mode</value>
  </data>
  <data name="_monitorCalibrateZone" xml:space="preserve">
    <value>Calibrate output</value>
  </data>
  <data name="GbPilot" xml:space="preserve">
    <value>Monitoring frequency</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Monitoring {0}</value>
  </data>
  <data name="_LowImpedanceMonitoring" xml:space="preserve">
    <value>Monitoring settings</value>
  </data>
  <data name="_monitorBlockTitle" xml:space="preserve">
    <value>Monitoring</value>
  </data>
  <data name="_monitorDeviation1" xml:space="preserve">
    <value>Deviation (W)</value>
  </data>
  <data name="_monitorLoadA1" xml:space="preserve">
    <value>Line A</value>
  </data>
  <data name="_monitorLoadAB" xml:space="preserve">
    <value>Line A+B</value>
  </data>
  <data name="_monitorLoadB1" xml:space="preserve">
    <value>Line B</value>
  </data>
  <data name="DeviationInfo" xml:space="preserve">
    <value>The indicated deviation values in 'Watt' are 5%, 10%, 20%, 30% or 50% of the calibrated load, with a minimum of 10W.</value>
  </data>
  <data name="DeviationInfoTitle" xml:space="preserve">
    <value>Deviation Info</value>
  </data>
</root>