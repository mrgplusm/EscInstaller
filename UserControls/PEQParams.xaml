<UserControl x:Class="EscInstaller.UserControls.PEQParams"
             x:Name="UcParams"
             
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:uc="clr-namespace:EscInstaller.UserControls" xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:system="clr-namespace:System;assembly=mscorlib"

             xmlns:common="clr-namespace:Common;assembly=Common"
             xmlns:model="clr-namespace:Common.Model;assembly=Common"
             xmlns:converters1="clr-namespace:Common.Converters;assembly=Common"
             xmlns:settings="clr-namespace:EscInstaller.ViewModel.Settings"
             xmlns:view="clr-namespace:EscInstaller.View"
             xmlns:peq="clr-namespace:EscInstaller.ViewModel.Settings.Peq"


             mc:Ignorable="d"                  
             d:DataContext="{d:DesignInstance peq:SpeakerDataViewModel, IsDesignTimeCreatable=True }"
>
    <UserControl.Resources>

        <ObjectDataProvider x:Key="DataFromEnum"
       MethodName="GetValues" ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="common:FilterType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>


        <Style TargetType="{x:Type DataGridCell}">

            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="DataGridCellPreviewMouseLeftButtonDown" />

        </Style>


        <Style TargetType="DataGridRow">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" 
                         Value="True">
                    <Setter Property="Background"
                            Value="Lightblue" />

                </Trigger>

            </Style.Triggers>
            <EventSetter Event="MouseMove" Handler="RowMouseMove" />
            <EventSetter Event="MouseLeave" Handler="RowMouseLeave" />
        </Style>


    </UserControl.Resources>

    <GroupBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  >
        <GroupBox.Header>
            <StackPanel Orientation="Horizontal">
                <TextBox Text="{Binding Path=SpeakerName}" MaxLength="13" Width="150" >
                    <TextBox.Style>
                        <Style TargetType="TextBox">
                            <Setter Property="Foreground" Value="Black" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=InLibrary}" Value="true" >
                                    <Setter Property="Background" Value="IndianRed"></Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                </TextBox>
                <Button Content="Update"></Button>
                <Label Content="{Binding Path=FilterCountText}"  />
            </StackPanel>
        </GroupBox.Header>

        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <DataGrid ItemsSource="{Binding Path=PeqDataViewModels}"  AutoGenerateColumns="False"
                  AlternationCount="15" SelectionUnit="Cell" VerticalScrollBarVisibility="Visible" Grid.Row="0" VirtualizingStackPanel.VirtualizationMode="Recycling" 
                            RowHeight="23" VirtualizingStackPanel.IsVirtualizing="True" >
                <DataGrid.Style>
                    <Style TargetType="DataGrid">
                        <Setter Property="IsEnabled" Value="False" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=InLibrary}" Value="False">
                                <Setter Property="IsEnabled" Value="True"></Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.Style>
                <DataGrid.Columns>
                    <DataGridTemplateColumn >
                        <DataGridTemplateColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Background" Value="{Binding Path=Color}" />
                                <Setter Property="Width" Value="10" />
                            </Style>
                        </DataGridTemplateColumn.CellStyle>
                    </DataGridTemplateColumn>
                    <DataGridCheckBoxColumn Binding="{Binding Path=IsEnabled, UpdateSourceTrigger=PropertyChanged}" 
                                        Header="{x:Static view:SpeakerLibrary._micPEQEnable}" />
                    <DataGridTemplateColumn Header="{x:Static view:SpeakerLibrary._micPEQBoost}" SortMemberPath="Boost" >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate DataType="model:PeqDataModel">
                                <xctk:DoubleUpDown FormatString="F3" Value="{Binding Path=Boost, UpdateSourceTrigger=PropertyChanged}" 
                                                   Minimum="-15" Maximum="15" Increment=".5"
                                                     IsEnabled="{Binding Path=FilterType, Converter={converters1:PeqParamEnableConverter},
                     ConverterParameter=boost}"/>

                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="{x:Static view:SpeakerLibrary._micPEQBand}" SortMemberPath="BandWidth" >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate DataType="{x:Type model:PeqDataModel}">
                                <xctk:DoubleUpDown FormatString="F3" x:Name="band" 
                                                   Value="{Binding Path=BandWidth, UpdateSourceTrigger=PropertyChanged}" 
                                                   Minimum=".1" Maximum="6.67" Increment=".2"
                                                     IsEnabled="{Binding Path=FilterType, Converter={converters1:PeqParamEnableConverter},
                     ConverterParameter=band}"/>

                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="{x:Static view:SpeakerLibrary._micPEQQ}" SortMemberPath="BandWidth" >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate DataType="{x:Type model:PeqDataModel}">
                                <xctk:DoubleUpDown FormatString="F3" Value="{Binding Path=BandWidth, Converter={converters1:BandtoQfactor}, 
                                    UpdateSourceTrigger=PropertyChanged}" Minimum=".1" Maximum="14.42" Increment=".4"
                                               IsEnabled="{Binding Path=FilterType, Converter={converters1:PeqParamEnableConverter},
                                                ConverterParameter=band}"   />

                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn Header="{x:Static view:SpeakerLibrary._micPEQFreq}" SortMemberPath="Frequency" >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate DataType="{x:Type model:PeqDataModel}">
                                <uc:FrequencyUpDown FormatString="F0" Value="{Binding Path=Frequency, UpdateSourceTrigger=PropertyChanged}" 
                                                    Minimum="10" Increment="0.1"  >
                                    <uc:FrequencyUpDown.Style>
                                        <Style TargetType="uc:FrequencyUpDown">
                                            <Setter Property="Maximum" Value="20000" />

                                        </Style>
                                    </uc:FrequencyUpDown.Style>
                                </uc:FrequencyUpDown>

                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridComboBoxColumn Width="120" Header="{x:Static view:SpeakerLibrary._micPEQType}" 
                                            ItemsSource="{Binding Source={StaticResource DataFromEnum}}" 
                                    SelectedItemBinding="{Binding Path=FilterType, UpdateSourceTrigger=PropertyChanged}"  >
                        <DataGridComboBoxColumn.EditingElementStyle>
                            <Style TargetType="{x:Type ComboBox}">
                                <Setter Property="IsDropDownOpen" Value="True"></Setter>
                            </Style>
                        </DataGridComboBoxColumn.EditingElementStyle>
                    </DataGridComboBoxColumn>

                    <DataGridTemplateColumn Header="{x:Static view:SpeakerLibrary._micPEQOrder}" SortMemberPath="Order" >
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <xctk:IntegerUpDown FormatString="F0" x:Name="band" 
                                                   Value="{Binding Path=Order, UpdateSourceTrigger=PropertyChanged}" 
                                                     IsEnabled="{Binding Path=FilterType, Converter={converters1:PeqParamEnableConverter},
                                    
                     ConverterParameter=order}">
                                    <xctk:IntegerUpDown.Style>
                                        <Style TargetType="xctk:IntegerUpDown">
                                            <Setter Property="Minimum" Value="1" />
                                            <Setter Property="Maximum" Value="6" />
                                            <Setter Property="Increment" Value="1" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=FilterType, 
                                                    Converter={converters1:PeqParamEnableConverter}, ConverterParameter=linkwitz}" Value="True" >
                                                    <Setter Property="Minimum" Value="2" />
                                                    <Setter Property="Increment" Value="2"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=FilterType, 
                                                    Converter={converters1:PeqParamEnableConverter}, ConverterParameter=bessel}" Value="True" >
                                                    <Setter Property="Minimum" Value="2" />
                                                    <Setter Property="Maximum" Value="4" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </xctk:IntegerUpDown.Style>
                                </xctk:IntegerUpDown>

                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                    <DataGridTemplateColumn Width="20">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button Width="15" Height="15" Command="{Binding Path=RemoveParam}" CommandParameter="{Binding}">
                                    <Image Source="../Icons/Button-Remove-icon.png" Stretch="Fill" Margin="0" />
                                </Button>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>

            </DataGrid>
            <StackPanel Orientation="Horizontal" Grid.Row="1" VerticalAlignment="Top">
                <Button Width="23" Height="23" Command="{Binding Path=AddNewParam}" >
                    <Image Source="/Icons/add-32.png" Margin="0" Stretch="Fill" Style="{StaticResource GrOut}" />
                    <Button.ToolTip>
                        <TextBlock Text="{x:Static view:SpeakerLibrary.AddNewParam}" />
                    </Button.ToolTip>
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="IsEnabled" Value="False" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=InLibrary}" Value="False">
                                    <Setter Property="IsEnabled" Value="True"></Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button Width="23" Height="23" Command="{Binding Path=ClearParams}" >
                    <Image Source="/Icons/remove-from-database-icon.png" Margin="0" Stretch="Fill"  />
                    <Button.ToolTip>
                        <TextBlock Text="{x:Static view:SpeakerLibrary.RemoveAllParams}" />
                    </Button.ToolTip>
                </Button>

                <TextBlock Foreground="Red" Text="{x:Static view:SpeakerLibrary.LockWarning}" TextWrapping="Wrap" Width="400">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Collapsed"></Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=InLibrary}" Value="True">
                                    <Setter Property="Visibility" Value="Visible"></Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </StackPanel>

        </Grid>
    </GroupBox>
</UserControl>
